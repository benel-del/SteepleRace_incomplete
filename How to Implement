*****
track을 미리 생성하지 말고, player가 portal-A와 충돌하면 그때 다음 track을 load?Active?하여 생성

* ver.trac Ative
*****

[Hierarchy]
- [ ] Directional Light
- [ ] ScriptObject : MainScript.cs, WeatherCreate.cs, Start.cs
- [ ] player : rigidbody, rotation-freeze, PlayerMove.cs, Collision.cs, StaticFrictionChange.cs
    - [ ] player
    - [ ] Main Camera
    - [ ] time : 3D text
    - [ ] distance : 3D text
    - [ ] start : 3D text
    - [ ] result1 : Resources
    - [ ] result2 : Resources
- [ ] track 1 : stoneCreate.cs
    - [ ] track : prefab
    - [ ] hurdle(n) : rigidbody, prefab
- [ ] track 2
    - [ ] track : prefab
    - [ ] stone : Resources
- [ ] track 3(2)
    - [ ] board :
    - [ ] portal-C = portal-A
- [ ] track 4
    - [ ] track : prefab
    - [ ] stick(n) : rigidbody, prefab
    - [ ] goalLine
- [ ] portal-A
- [ ] portal-B

- [ ] grass(6) : prefab
- [ ] Gsun : Resources
    - [ ] heat_haze : Resources
- [ ] Gcloud : Resources
    - [ ] cloud : Resources
- [ ] Grain : Resources
    - [ ] darkCloud : Resources
    - [ ] rain : Resources
- [ ] Gsnow : Resources
    - [ ] darkCloud : Resources
    - [ ] snow : Resources
    - [ ] snow_set : Resources
    - [ ] ice : Resources

* start point  = portal-A
* end point = portal-B

[Resources]
- [ ] result1 : 3D text, "Game success"
- [ ] result2 : 3D text, "Game Failed"
- [ ] stone : Prefab, rigidbody, ObstacleStone.cs
- [ ] board : Physic Material, Static Friction = 0.2
- [ ] ice : Physic Material, Static Friction = 0
- [ ] portalEffect : Particle System
- [ ] weather/Gsun : Light, heat_hazeCreate.cs
- [ ] weather/Gcloud : GameObject, cloudCreate.cs
- [ ] weather/Grain : GameObject, rainCreate.cs
- [ ] weather/Gsnow : GameObject, snowCreate.cs
- [ ] heat_haze : particle
- [ ] cloud : prefab, cloud.cs
- [ ] darkCloud : prefab, cloud.cs
- [ ] rain : particle
- [ ] snow : particle
- [ ] snow_set : prefab, snowSub.cs
- [ ] ice : prefab, snowSub.cs



[Scripts]
- [ ] PlayerMove.cs : 게임 종료 전까지 Player 이동
    :: Player
    - if(GameObject.FindWithTag("result") && !gameObject.GetComponent<Collision>().notMove)
        if(transform.position.y < 0)
            falling.Play()
        else
            if(Input.GetKeyDown(KeyCode.Space))
                if(!transform.position.y)
                    transform.Translate(Vector3.up * 500f * Time.deltaTime)
            if(Input.GetKeyDown(KeyCode.UpArrow))   ...
            if(Input.GetKeyDown(KeyCode.Left))
                if(transform.position.x >= maxLeft) ...
            if(Input.GetKeyDown(KeyCode.Right))
                if(transform.position.x <= maxRight)    ...
    - public : int speed, AudioSource falling
    - private : int maxLeft(-24)/maxRight(24)

- [ ] MainScript.cs : timer, distance, game result
    :: ScriptObject
    - start()
        distance = trackLength * 4
        limit_time = ...
    - getDistance() // in Update()
        if(GameObjacet.Find("track 1").activeSelf == true)
            distance = trackLength * 4 - player.position.z
        else if(GameObjacet.Find("track 2").activeSelf == true)
            distance = trackLength * 3 - player.position.z
        else if(GameObjacet.Find("track 3").activeSelf == true)
            distance = trackLength * 2 - player.position.z
        else
            distance = trackLength * 1 - player.position.z
        distance.GetComponent<Text>.text = distance + "m"
    - Timer()   // in Update()
        if(!distance)  // player position == end point
            GameObjacet.Find("result1").SetActive(true)
        else
            if(!limit_time) // time out
                GameObjacet.Find("result2").SetActive(true)
            else if(!(++count % 50))
                time.GetComponent<Text>.text = --limit_time + "초"
                if(player.GetComponent<Collision>().notMove)
                    player.GetComponent<Collision>().notMove--
    - public : int trackLength(500), float distance, GameObjacet player, GameObjacet distance, GameObjacet time
    - private : int count(0), int limit_time(60)

- [ ] Collision.cs : 충돌 후 player 상태 변화(speed, notMoveTime) + sound
    :: player
    - effect = Resources.Load("particleEffect")
    - OnCollisionEnter(Collision other)
        if(other.GameObject.name == "board")
            gameObject.GetComponent<PlayerMove>().speed = 10
        eles if(other.GameObject.name == "snow_set")
            gameObject.GetComponent<PlayerMove>().speed = 5
            snow.Play()
        else
            gameObject.GetComponent<PlayerMove>().speed = initSpeed
            if(other.GameObject.name == "hurdle")
                notMove = notMoveTime
                hurdle.Play()
            if(other.GameObject.name == "stone")
                notMove = notMoveTime
            if(other.GameObject.name == "stick")
                notMove = notMoveTime
                stick.Play()
            if(other.GameObject.name == "ice")
                notMove = notMoveTime
            if(other.GameObject.name == "portal-C")
                gameObject.position = portal.position
            if(other.GameObject.name== "portal-A")
                if(GameObjacet.Find("track 1").activeSelf)
                    GameObjacet.Find("track 1").SetActive(false)
                    GameObjacet.Find("track 2").SetActive(true)
                else if(GameObjacet.Find("track 2").activeSelf)
                    GameObjacet.Find("track 2").SetActive(false)
                    GameObjacet.Find("track 3").SetActive(true)
                else if(GameObjacet.Find("track 3").activeSelf)
                    GameObjacet.Find("track 3").SetActive(false)
                    GameObjacet.Find("track 4").SetActive(true)
                gameObject.position = portal.position
                portal.Play()
            if(other.GameObject.name == "portal-B")
                instance = Instantiate(effect, transform.position, Quaternion.identity)
                Destroy(instance, 2f)
    - public : int notMove, AudioSource hurdle, stick, grass, snow, portal, Transform portal
    - private : int initSpeed, int notMoveTime, GameObject instance, GameObject effect

- [ ] stoneCreate.cs : stone 생성
    :: track 1
    - start()
        stone = Resources.Load("stone")
        startCoroutine(createStone)
    - IEnumerator createStone() // InvokeRepeating은 active여부와 관계없이 계속 반복
        while(true)
            x = Random.Range(maxLeft, maxRight)
            z = Random.Random(maxBottom + 50, maxTop - 50)
            Instantiate(stone, new Vector3(x*2.0f, 60, z*2.0f)), Quaternion.identity)
            yeild return null
    - public :
    - private : GameObject stone, int maxLeft(-24)/maxRight(24)/maxTop(250)/maxBottom(-250)

- [ ] ObstacleStone.cs : stone 소멸, Collision sound
    :: stone
    - OnCollisionEnter(Collision other)
        stone.Play()
        Destroy(gameObject)
    - public : AudioSource stone
    - private : 

- [ ] ObstacleStick.cs : stick의 움직임
    :: stick
    - WaitForSeconds(Random.Range(0,2))
    - while(true)
        GetComponent<Rigidbody>().AddForce(transform.left * 400)
        WaitForSeconds(3)
        GetComponent<Rigidbody>().AddForce(transform.right * 400)
        WaitForSeconds(3)
    - public : 
    - private : 

- [ ] StaticFrictionChange.cs : player의 정지 마찰력 감소
    :: player
    - start()
        mt1 = Resources.Load("board", typeof(Material)) as Material
        mt2 = Resources.Load("ice", typeof(Material)) as Material
    - OnCollisionEnter(Collision other)
        if(other.GameObject.name == "board")      
            player.GetComponent<Renderer>.material = mt1
        else if(other.GameObject.name == "ice")
            player.GetComponent<Renderer>.material = mt2
        else
            player.GetComponent<Renderer>.material = none;
    - public : GameObject player
    - private : Material mt1, Material mt2

- [ ] WeatherCreate.cs : 날씨 변화
    :: GameObject
    - instance = Resources.LoadAll("weather")   // Gsun, Gcloud, Grain, Gsnow
    - pos = new Vector3(0, 100, 0)
    - while(!GetObject.FineWithTag("result"))
        int rand = Random.Range(0,4)
        switch(rand)
            case 0: // Gsun
                instance1 = Instantiate(instance[0], pos, Quaternion.identity)
                player.GetComponent<PlayerMove>().speed -= 10
                sun.Play()
                WaitForSeconds(15)
                player.GetComponent<PlayerMove>().speed += 10
            case 1: // Gcloud
                instance1 = Instantiate(instance[1], pos, Quaternion.identity)
                cloud.Play()
                WaitForSeconds(15)
            case 2: // Grain
                instance1 = Instantiate(instance[2], pos, Quaternion.identity)
                player.GetComponent<Renderer>().drag += 10
                rain.Play()
                WaitForSeconds(15)
                player.GetComponent<Renderer>().drag -= 10
            case 3: // Gsnow
                instance1 = Instantiate(instance[3], pos, Quaternion.identity)
                player.GetComponent<PlayerMove>().speed -= 5
                player.GetComponent<Transform>().position.x += Random.Range(-1,1)
                snow.Play()
                WaitForSeconds(15)
                player.GetComponent<PlayerMove>().speed += 5
        Destroy(instance1)
    - public : GameObject player, AudioSource sun, cloud, rain, snow
    - private : GameObject instance[4], GameObject instance1, Vector3 pos

- [ ] cloudCreate.cs : 구름 생성        // particle로 구현할 경우 삭제
    :: Gcloud
    - for(i = 0; i < 20; i++)
            x = Random.Range(maxLeft - 50, maxLeft)
            z = Random.Random(maxBottom, maxTop)
            Instantiate(cloud, new Vector3(x*2.0f, 100, z*2.0f), Quaternion.identity)
    - public :
    - private : float x, z, int maxLeft(-24)/maxRight(24)/maxTop(250)/maxBottom(-250)

- [ ] cloud.cs : 구름 소멸        // particle로 구현할 경우 삭제
    :: cloud, darkCloud
    - if(GetObject.Find("Gsun"))
        Destroy(gameObject)
    - public :
    - private : 

- [ ] rainCreate.cs : 먹구름 생성        // particle로 구현할 경우 삭제
    :: Grain
    - for(i = 0; i < 40; i++)
        x = Random.Range(maxLeft - 50, maxLeft)
        z = Random.Random(maxBottom, maxTop)
        Instantiate(darkCloud, new Vector3(x*2.0f, 100, z*2.0f), Quaternion.identity)
    - public :
    - private : float x, z, int maxLeft(-24)/maxRight(24)/maxTop(250)/maxBottom(-250)

- [ ] snowCreate.cs : 먹구름, snow_set, ice 생성
    :: Gsnow
    - for(i = 0; i < 15; i++)
        x = Random.Range(maxLeft - 50, maxLeft)
        z = Random.Random(maxBottom, maxTop)
        Instantiate(darkCloud, new Vector3(x*2.0f, 100, z*2.0f), Quaternion.identity)
    - InvokeRepeating("CreateSub", 1.5f, 0.6f)
    - CreateSub()
        x = Random.Range(maxLeft, maxRight)
        z = Random.Random(maxBottom + 50, maxTop - 50)
        Instantiate(ice, new Vector3(x*2.0f, 0.01, z*2.0f), Quaternion.identity)
        x = Random.Range(maxLeft, maxRight)
        z = Random.Random(maxBottom + 50, maxTop - 50)
        Instantiate(snow_set, new Vector3(x*2.0f, 0.01, z*2.0f), Quaternion.identity)
    - public :
    - private : float x, z, int maxLeft(-24)/maxRight(24)/maxTop(250)/maxBottom(-250)

- [ ] snowSub.cs : snow_set, ice 소멸
    :: snow_set, ice
    - if(!GetObject.Find("Gsnow"))
        Destroy(gameObject)
    - public : 
    - private : 

- [ ] Start.cs : 게임 시작 카운트다운
    :: ScriptObject
    - player.GetComponent<Collision>().notMove = 5;
    - start.SetActive(true)
    - if(!(++count % 50) && player.GetComponent<Collision>().notMove)
        if(player.GetComponent<Collision>().notMove > 1)
            start.GetComponent<Text>.text = (player.GetComponent<Collision>().notMove-- - 2) + ""
        else
            start.GetComponent<Text>.text = "땅!"
        start.Play()
    - else if(!player.GetComponent<Collision>().notMove)
        start.SetActive(false)
    - public : AudioSource start, GameObject start, GameObject player
    - private : int count